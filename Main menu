#include <iostream>
#include <filesystem>
#include <string>

using namespace std;
namespace fs = std::filesystem;

void list_files() {
    cout << "List of files in the current directory:" << endl;
    for (const auto& entry : fs::directory_iterator(fs::current_path())) {
        if (entry.is_regular_file()) {
            cout << entry.path().filename().string() << endl;
        }
    }
}

void list_files_by_extension() {
    string extension;
    cout << "Enter the file extension (e.g., .txt): ";
    cin >> extension;
    cout << "List of files with extension " << extension << ":" << endl;
    for (const auto& entry : fs::directory_iterator(fs::current_path())) {
        if (entry.is_regular_file() && entry.path().extension() == extension) {
            cout << entry.path().filename().string() << endl;
        }
    }
}

void list_files_by_pattern() {
    string pattern;
    cout << "Enter the file pattern (e.g., moha*.*): ";
    cin >> pattern;
    cout << "List of files matching pattern " << pattern << ":" << endl;
    for (const auto& entry : fs::directory_iterator(fs::current_path())) {
        if (entry.is_regular_file() && entry.path().filename().string().find(pattern) != string::npos) {
            cout << entry.path().filename().string() << endl;
        }
    }
}

void create_directory() {
    string dirName;
    cout << "Enter the name of the directory: ";
    cin >> dirName;
    fs::path dirPath = fs::current_path() / dirName;
    if (fs::create_directory(dirPath)) {
        cout << "Directory created successfully." << endl;
    } else {
        cout << "Error creating directory." << endl;
    }
}

void change_directory() {
    int choice;
    cout << "Change directory options:" << endl;
    cout << "1. Move one step back (to the parent directory)" << endl;
    cout << "2. Move to the root directory" << endl;
    cout << "3. Move to a specific directory" << endl;
    cout << "Enter your choice: ";
    cin >> choice;
    switch (choice) {
        case 1:
            fs::current_path(fs::current_path().parent_path());
            break;
        case 2:
            fs::current_path(fs::path("/"));
            break;
        case 3: {
            string dirName;
            cout << "Enter the name of the directory: ";
            cin >> dirName;
            fs::path dirPath = fs::path(dirName);
            if (fs::exists(dirPath)) {
                fs::current_path(dirPath);
                cout << "Directory changed successfully." << endl;
            } else {
                cout << "Error changing directory." << endl;
            }
            break;
        }
        default:
            cout << "Invalid choice." << endl;
    }
}

int main() {
    int choice;
    while (true) {
        cout << "Main Menu:" << endl;
        cout << "1. List files in the current directory" << endl;
        cout << "2. Create a new directory" << endl;
        cout << "3. Change the working directory" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: {
                int subChoice;
                cout << "List files options:" << endl;
                cout << "1. List all files in the current directory" << endl;
                cout << "2. List files based on a specific extension" << endl;
                cout << "3. List files based on a pattern" << endl;
                cout << "Enter your choice: ";
                cin >> subChoice;
                switch (subChoice) {
                    case 1:
                        list_files();
                        break;
                    case 2:
                        list_files_by_extension();
                        break;
                    case 3:
                        list_files_by_pattern();
                        break;
                    default:
                        cout << "Invalid choice." << endl;
                }
                break;
            }
            case 2:
                create_directory();
                break;
            case 3:
                change_directory();
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice." << endl;
        }
    }
    return 0;
}
